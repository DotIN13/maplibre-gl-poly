diff --git a/node_modules/@mapbox/tiny-sdf/index.js b/node_modules/@mapbox/tiny-sdf/index.js
index 08bd44a..0c9a2e9 100644
--- a/node_modules/@mapbox/tiny-sdf/index.js
+++ b/node_modules/@mapbox/tiny-sdf/index.js
@@ -13,13 +13,14 @@ export default class TinySDF {
         this.buffer = buffer;
         this.cutoff = cutoff;
         this.radius = radius;
+        this.fontSize = fontSize;
 
         // make the canvas size big enough to both have the specified buffer around the glyph
         // for "halo", and account for some glyphs possibly being larger than their font size
         const size = this.size = fontSize + buffer * 4;
 
         const canvas = this._createCanvas(size);
-        const ctx = this.ctx = canvas.getContext('2d', {willReadFrequently: true});
+        const ctx = this.ctx = canvas.getContext('2d', { willReadFrequently: true });
         ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;
 
         ctx.textBaseline = 'alphabetic';
@@ -49,26 +50,39 @@ export default class TinySDF {
             actualBoundingBoxRight
         } = this.ctx.measureText(char);
 
-        // The integer/pixel part of the top alignment is encoded in metrics.glyphTop
-        // The remainder is implicitly encoded in the rasterization
-        const glyphTop = Math.ceil(actualBoundingBoxAscent);
-        const glyphLeft = 0;
-
-        // If the glyph overflows the canvas size, it will be clipped at the bottom/right
-        const glyphWidth = Math.min(this.size - this.buffer, Math.ceil(actualBoundingBoxRight - actualBoundingBoxLeft));
-        const glyphHeight = Math.min(this.size - this.buffer, glyphTop + Math.ceil(actualBoundingBoxDescent));
-
-        const width = glyphWidth + 2 * this.buffer;
-        const height = glyphHeight + 2 * this.buffer;
+        let glyphTop, glyphLeft, width, glyphWidth, height, glyphHeight, bufferTop, bufferLeft, baselinePosition;
+        if (actualBoundingBoxLeft !== undefined && actualBoundingBoxRight !== undefined) {
+            glyphTop = Math.ceil(actualBoundingBoxAscent);
+            glyphLeft = 0;
+            bufferTop = bufferLeft = this.buffer
+
+            // If the glyph overflows the canvas size, it will be clipped at the bottom/right
+            glyphWidth = Math.min(this.size - this.buffer, Math.ceil(actualBoundingBoxRight - actualBoundingBoxLeft));
+            glyphHeight = Math.min(this.size - this.buffer, glyphTop + Math.ceil(actualBoundingBoxDescent));
+
+            width = glyphWidth + 2 * this.buffer;
+            height = glyphHeight + 2 * this.buffer;
+            baselinePosition = this.buffer + glyphTop;
+        } else {
+            // hack around https://bugzilla.mozilla.org/show_bug.cgi?id=737852
+            const middle = Math.round((this.size / 2) * (navigator.userAgent.indexOf('Gecko/') >= 0 ? 1.2 : 1));
+            width = glyphWidth = this.size;
+            height = glyphHeight = this.size;
+            glyphTop = 19 * this.fontSize / 24;
+            glyphLeft = 0;
+            bufferTop = bufferLeft = 0;
+            baselinePosition = middle;
+            this.ctx.textBaseline = "middle";
+        }
 
         const len = Math.max(width * height, 0);
         const data = new Uint8ClampedArray(len);
-        const glyph = {data, width, height, glyphWidth, glyphHeight, glyphTop, glyphLeft, glyphAdvance};
+        const glyph = { data, width, height, glyphWidth, glyphHeight, glyphTop, glyphLeft, glyphAdvance };
         if (glyphWidth === 0 || glyphHeight === 0) return glyph;
 
-        const {ctx, buffer, gridInner, gridOuter} = this;
+        const { ctx, buffer, gridInner, gridOuter } = this;
         ctx.clearRect(buffer, buffer, glyphWidth, glyphHeight);
-        ctx.fillText(char, buffer, buffer + glyphTop);
+        ctx.fillText(char, buffer, baselinePosition);
         const imgData = ctx.getImageData(buffer, buffer, glyphWidth, glyphHeight);
 
         // Initialize grids outside the glyph range to alpha 0
